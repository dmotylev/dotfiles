set nocompatible               " be iMproved
filetype off                   " required!

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()
" let Vundle manage Vundle
" required! 
Plugin 'gmarik/Vundle.vim'
" load bundles from ~/.vim/bundle
Plugin 'fatih/vim-go'
Plugin 'rizzatti/dash.vim'
Plugin 'ervandew/supertab'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'mattn/emmet-vim'
Plugin 'chriskempson/base16-vim'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'mhinz/vim-signify'
Plugin 'majutsushi/tagbar'
Plugin 'mhinz/vim-startify'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'scrooloose/syntastic'
" All of your Plugins must be added before the following line
call vundle#end()

" generic options
syn on
set wrap
set ts=4
set title
set shortmess=atI
set visualbell
set t_Co=256
set fillchars=vert:⏐
" Allow move the cursor left/right to move to the previous/next line when the cursor is on the first/last character in the line.
set ww=<,>,[,]

filetype plugin indent on     " required!

" Highlight search terms
set hlsearch
set incsearch " ...dynamically as they are typed.
" If the search term highlighting gets annoying, set a key to switch it off temporarily:
nmap <silent> <Leader>n :silent :nohlsearch<CR>
" The following will make tabs and trailing spaces visible when requested:
set listchars=tab:•·,trail:·,eol:$,extends:❯,precedes:❮
set fillchars=vert:⏐
set showbreak=⎖\ 
nmap <silent> <Leader>S :set nolist!<CR>
" The current buffer can be put to the background without writing to disk;
" When a background buffer becomes current again, marks and undo-history are remembered.
set hidden
" By default, Vim only remembers the last 20 commands and search patterns entered. It’s nice to boost this up:
set history=1000
" By default, pressing <TAB> in command mode will choose the first possible completion with no indication of how many others there might be. The following configuration lets you see what your other options are:
set wildmenu
" To have the completion behave similarly to a shell, i.e. complete only up to the point of ambiguity (while still showing you what your options are)
set wildmode=list:longest
" These two options, when set together, will make /-style searches case-sensitive only if there is a capital letter in the search expression. *-style searches continue to be consistently case-sensitive.
set ignorecase
set smartcase
nmap * /\C\<<C-R>=expand('<cword>')<CR>\><CR>
nmap # ?\C\<<C-R>=expand('<cword>')<CR>\><CR>
nmap <Leader>s :%s/\C\<<C-R>=expand('<cword>')<CR>\>//g<Left><Left>
" Setting the option below will start the scrolling three lines before the border, keeping more context around where you’re working.
set scrolloff=3
" Swap files and backups are annoying but can save you a lot of trouble. Rather than spread them all around your filesystem, isolate them to a single directory
set backupdir=~/.vim/tmp//,/var/tmp//,/tmp//
set directory=~/.vim/tmp//,/var/tmp//,/tmp//
set wildignore+=*.o,*.obj,.git,*.6,*.out,*.a,_testmain.go
" setup omnicomplete
set omnifunc=syntaxcomplete#Complete
set completeopt=menuone,longest
set pumheight=15


" point grep command to ag
set grepprg=ag\ --nogroup\ --nocolor
" and adjust grep format
set grepformat=%f:%l:%c:%m

" setup startify
highlight default StartifyHeader ctermfg=156 guifg=#90e060
let g:startify_list_order = ['sessions', 'files', 'bookmarks']
let g:startify_session_dir='~/Dropbox/Vim/Sessions'
let g:startify_change_to_vcs_root = 1
let g:startify_session_persistence = 1
let g:startify_restore_position = 1
let g:startify_custom_header = [
						\ '      ..      .                                                                                .                        ',
						\ '   x88f` `..x88. .>                  ..                 ..                                    @88>                      ',
						\ ' :8888   xf`*8888%     u.    u.     888>         u.    @L                   ...     ..        %8P      ..    .     :    ',
						\ ':8888f .888  `"`     x@88k u@88c.   "8P    ...ue888b  9888i   .dL        :~""888h.:^"888:      .     .888: x888  x888.  ',
						\ '88888'' X8888. >"8x  ^"8888""8888"    .     888R Y888r `Y888k:*888.      8X   `8888X  8888>   .@88u  ~`8888~''888X`?888f` ',
						\ '88888  ?88888< 888>   8888  888R   u888u.  888R I888>   888E  888I     X888n. 8888X  ?888>  ''888E`   X888  888X ''888>  ',
						\ '88888   "88888 "8%    8888  888R  `''888E   888R I888>   888E  888I     ''88888 8888X   ?**h.   888E    X888  888X ''888>  ',
						\ '88888 ''  `8888>       8888  888R    888E   888R I888>   888E  888I       `*88 8888~ x88x.     888E    X888  888X ''888>  ',
						\ '`8888> %  X88!        8888  888R    888E  u8888cJ888    888E  888I      ..<"  88*`  88888X    888E    X888  888X ''888>  ',
						\ ' `888X  `~""`   :    "*88*" 8888"   888E   "*888*P"    x888N><888''         ..XC.    `*8888k   888&   "*88%""*88" ''888!` ',
						\ '   "88k.      .~       ""   ''Y"     888E     ''Y"        "88"  888        :888888H.    `%88>   R888"    `~    "    `"`   ',
						\ '     `""*==~~`                      888E                      88F       <  `"888888:    X"     ""                       ',
						\ '                                    888E                     98"              %888888x.-`                               ',
						\ '                                    888P                   ./"                  ""**""                                  ',
						\ '                                  .J88" "                 ~`                                                            ',
						\ ]

" setup supertab completion
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

" setup CtrlP
let g:ctrlp_cmd='CtrlPBuffer'
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_lazy_update = 1
let g:ctrlp_user_command = {
	\ 'types': {
		\ 1:['.git', 'cd %s && git ls-files']
	\ },
	\ 'fallback': 'ag %s -l --nocolor -g ""'
	\}

" set up NERDtree
map <silent> <C-n> :NERDTreeToggle<CR>
let g:NERDTreeWinSize=40

set laststatus=2
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#syntastic#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='kolor'
set noshowmode

let g:signify_sign_overwrite = 0

let g:syntastic_error_symbol='Er'
let g:syntastic_style_error_symbol='Es'
let g:syntastic_warning_symbol='Wr'
let g:syntastic_style_warning_symbol='Ws'
" configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open=1
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]

map <silent> <C-h> <Plug>DashSearch

colorscheme base16-tomorrow
set background=dark

map <silent> <C-\> :TagbarToggle<CR>
let g:tagbar_width=40
let g:tagbar_type_go = {
	\ 'ctagstype': 'go',
	\ 'kinds' : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin' : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

highlight VertSplit term=standout ctermfg=10 ctermbg=0 guifg=#3f2f3f guibg=#2d2d2d

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

