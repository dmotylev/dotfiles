""" GENERAL CONFIG
set wrap
set colorcolumn=80
set tabstop=4
set shiftwidth=4
set expandtab
" To have the completion behave similarly to a shell, 
" i.e. complete only up to the point of ambiguity (while still showing you 
" what your options are)
set wildmode=list:longest
" These two options, when set together, will make /-style searches
" case-sensitive only if there is a capital letter in the search expression.
" *-style searches continue to be consistently case-sensitive.
set ignorecase
set smartcase
set title
set shortmess=atIO
set visualbell
set t_Co=256
" Allow move the cursor left/right to move to the previous/next line when the
" cursor is on the first/last character in the line.
set whichwrap=<,>,[,]
set mouse=a
" Swap files and backups are annoying but can save you a lot of trouble.
" Rather than spread them all around your filesystem,
" isolate them to a single directory
set backupdir=~/.vim/tmp//,/var/tmp//,/tmp//
set directory=~/.vim/tmp//,/var/tmp//,/tmp//
set wildignore+=*.o,*.obj,.git,*.6,*.out,*.a,_testmain.go
set undofile
set undodir=~/.vim/undo
set undolevels=1000
set undoreload=10000
set noshowmode
" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright
" Automatically read file if it was changed outside
set autoread
" Automatically write the file on make
set autowrite

nmap * /\C\<<C-R>=expand('<cword>')<CR>\><CR>
nmap # ?\C\<<C-R>=expand('<cword>')<CR>\><CR>
nmap <Leader>s :%s/\C\<<C-R>=expand('<cword>')<CR>\>//g<Left><Left>

" Tame quickfix list
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>w :cclose<CR>

" setup omnicomplete
set omnifunc=syntaxcomplete#Complete
set completeopt=menuone,longest
set pumheight=15

" Optimize rendering
set nocursorline
set nocursorcolumn
syntax sync minlines=256
syntax sync maxlines=256
set synmaxcol=256
" Warning: Line numbers in gutter make vim slow
nmap <C-N><C-N> :set invrelativenumber<CR>

""" Load plugins
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'nanotech/jellybeans.vim', { 'do': ':colorscheme jellybeans' }
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-obsession'
Plug 'kien/ctrlp.vim'
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'
Plug 'roxma/vim-tmux-focus-events'
Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips'
"" language specific
Plug 'fatih/vim-go', {'for': ['go']}
Plug 'git@github.com:sourcegraph-beta/sourcegraph-vim-beta.git', {'for': ['go']}
Plug 'kannokanno/previm', {'for': ['markdown']}
"Plug 'pearofducks/ansible-vim', {'for': ['ansible']}
"Plug 'chase/vim-ansible-yaml'
"Plug 'Glench/Vim-Jinja2-Syntax'
"Plug 'hashivim/vim-terraform'
"Plug 'mattn/emmet-vim'
"Plug 'cakebaker/scss-syntax.vim'
"Plug 'groenewege/vim-less'
"Plug 'dagwieers/asciidoc-vim'
"Plug 'cespare/vim-toml'
"Plug 'tfnico/vim-gradle'
call plug#end()

""" PLUGINS' CONFIG
if globpath(&rtp, 'colors/jellybeans.vim') != ""
	colorscheme jellybeans
    if &t_Co == 256 && g:colors_name =~ "jellybeans"
        highlight ColorColumn ctermfg=202 ctermbg=none
        highlight CursorLineNr ctermfg=202 ctermbg=none
        highlight LineNr ctermfg=235 ctermbg=none
        highlight! link NonText LineNr
        highlight! link SpecialKey LineNr
        highlight VertSplit ctermfg=234 ctermbg=none
        highlight SignColumn ctermbg=none
        highlight Search cterm=underline ctermfg=172 ctermbg=236
    endif
endif

" point grep command to ag
set grepprg=ag\ --skip-vcs-ignores\ --vimgrep\ $*
" and adjust grep format
set grepformat=%f:%l:%c:%m

let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ }
      \ }

" CtrlP
let g:ctrlp_cmd='CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_user_command = {
	\ 'types': {
	\   1:['.git', 'cd %s && git ls-files -co --exclude-standard']
	\ },
	\ 'fallback': 'ag %s -l --nocolor -g ""'
	\ }

" vim-go
let g:go_fmt_command = "goimports"
let g:go_fmt_autosave = 1
let g:go_fmt_fail_silently = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_auto_type_info = 1
let g:go_def_reuse_buffer = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_interfaces = 1
let g:go_list_type = "quickfix"

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
        call go#cmd#Test(0, 1)
    elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
    endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <leader>c <Plug>(go-coverage)
autocmd FileType go nmap <Leader>e <Plug>(go-rename)
autocmd FileType go nmap <Leader>d <Plug>(go-doc)
autocmd FileType go nmap <Leader>l :GoMetaLinter<CR>


let g:SOURCEGRAPH_AUTO = "false"
autocmd FileType go nnoremap <F11> :GRAPH<CR>

let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
let g:SuperTabLongestHighlight = 1
let g:SuperTabLongestEnhanced = 0

let g:UltiSnipsListSnippets = "<F12>"
let g:ansible_options = {'ignore_blank_lines': 0}
let g:terraform_fmt_on_save=1
let g:previm_open_cmd = 'open -a Google\ Chrome'

autocmd BufRead,BufNewFile Vagrantfile set filetype=ruby
autocmd BufNewFile,BufRead *.json.tpl set ft=json
autocmd BufNewFile,BufRead *.tfstate set ft=json
