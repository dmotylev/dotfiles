set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" generic options
syn on
set wrap
set ts=4
set title
set shortmess=atI
set visualbell
set t_Co=256
set fillchars=vert:⏐
highlight VertSplit term=reverse guifg=#5f5f60 guibg=#202020
" Allow move the cursor left/right to move to the previous/next line when the cursor is on the first/last character in the line.
set ww=<,>,[,]

filetype plugin indent on     " required!

" Highlight search terms
set hlsearch
set incsearch " ...dynamically as they are typed.
" If the search term highlighting gets annoying, set a key to switch it off temporarily:
nmap <silent> <leader>n :silent :nohlsearch<CR>
" The following will make tabs and trailing spaces visible when requested:
set listchars=tab:•·,trail:·,eol:$,extends:❯,precedes:❮
set fillchars=vert:⏐
set showbreak=⎖\ 
nmap <silent> <leader>s :set nolist!<CR>
" The current buffer can be put to the background without writing to disk;
" When a background buffer becomes current again, marks and undo-history are remembered.
set hidden
" By default, Vim only remembers the last 20 commands and search patterns entered. It’s nice to boost this up:
set history=1000
" By default, pressing <TAB> in command mode will choose the first possible completion with no indication of how many others there might be. The following configuration lets you see what your other options are:
set wildmenu
" To have the completion behave similarly to a shell, i.e. complete only up to the point of ambiguity (while still showing you what your options are)
set wildmode=list:longest
" These two options, when set together, will make /-style searches case-sensitive only if there is a capital letter in the search expression. *-style searches continue to be consistently case-sensitive.
set ignorecase
set smartcase
" Setting the option below will start the scrolling three lines before the border, keeping more context around where you’re working.
set scrolloff=3
" Swap files and backups are annoying but can save you a lot of trouble. Rather than spread them all around your filesystem, isolate them to a single directory
set backupdir=~/.vim/tmp//,/var/tmp//,/tmp//
set directory=~/.vim/tmp//,/var/tmp//,/tmp//
set wildignore+=*.o,*.obj,.git,*.6,*.out,*.a,_testmain.go
" setup omnicomplete
set omnifunc=syntaxcomplete#Complete
set completeopt=menuone,longest
set pumheight=15

" load bundles from ~/.vim/bundle
Bundle 'Blackrush/vim-gocode'
Bundle 'ervandew/supertab'
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'mattn/emmet-vim'
Bundle 'chriskempson/base16-vim'
Bundle 'bling/vim-airline'
Bundle 'rizzatti/funcoo.vim'
Bundle 'rizzatti/dash.vim'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-fugitive'
Bundle 'mhinz/vim-signify'
Bundle 'jnwhiteh/vim-golang'
Bundle 'majutsushi/tagbar'

" point grep command to ack
set grepprg=ack\ --column
" and adjust grep format
set grepformat=%f:%l:%c:%m

" setup supertab completion
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

" setup CtrlP
let g:ctrlp_user_command = {
	\ 'types': {
		\ 1:['.git', 'cd %s && git ls-files']
	\ },
	\ 'fallback': '/usr/bin/find %s -type f -exec file --mime-type {} \; | grep -Ev "^\./\." | grep -E "\Wtext/.$" | cut -d: -f1'
	\}

" set up NERDtree
autocmd vimenter * if !argc() | NERDTree | endif
map <silent> <C-n> :NERDTreeToggle<CR>
let g:NERDTreeWinSize=40

set laststatus=2
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#syntastic#enabled = 1
let g:airline_powerline_fonts = 1
set noshowmode

let g:signify_sign_overwrite = 0

let g:syntastic_error_symbol='Er'
let g:syntastic_style_error_symbol='Es'
let g:syntastic_warning_symbol='Wr'
let g:syntastic_style_warning_symbol='Ws'

map <silent> <C-h> <Plug>DashSearch

colorscheme base16-eighties
set background=dark

map <silent> <C-\> :TagbarToggle<CR>
let g:tagbar_width=40
let g:tagbar_type_go = {
	\ 'ctagstype': 'go',
	\ 'kinds' : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin' : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }
